generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isAdult       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  account       Account[]
  sessions      Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Profile {
  id       String  @id @default(cuid())
  userId   String? @unique
  username String? @unique
  email    String? @unique
  name     String?
  imageUrl String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tribes  Tribe[]
  members Member[]
  clans   Clan[]
}

// Territory -> Colony -> Tribe
model Tribe {
  id          String  @id @default(uuid())
  name        String
  imageUrl    String? @db.Text
  description String? @db.Text
  invite      String  @db.Text
  active      Boolean @default(true)
  deleted     Boolean @default(false)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: SetDefault)
  //TODO :: Check what references to setDefault does

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members Member[]
  clans   Clan[]

  @@index([profileId])
}

enum MemberTier {
  TIERONE
  TIERTWO
  TIERTHREE
  TIERFOUR
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id         String     @id @default(uuid())
  role       MemberRole @default(GUEST)
  memberTier MemberTier @default(TIERONE)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: SetDefault)

  tribeId String
  tribe   Tribe  @relation(fields: [tribeId], references: [id], onDelete: SetDefault)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([tribeId])
}

model Clan {
  id   String @id @default(uuid())
  name String

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: SetDefault)

  tribeId String
  tribe   Tribe  @relation(fields: [tribeId], references: [id], onDelete: SetDefault)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([tribeId])
}
